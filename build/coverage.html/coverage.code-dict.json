{"/home/travis/build/npmtest/node-npmtest-fibers/test.js":"/* istanbul instrument in package npmtest_fibers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fibers/lib.npmtest_fibers.js":"/* istanbul instrument in package npmtest_fibers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fibers = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fibers = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fibers/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fibers && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fibers */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fibers\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fibers.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fibers.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fibers.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fibers.__dirname + '/lib.npmtest_fibers.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fibers/node_modules/fibers/fibers.js":"if (process.fiberLib) {\n\treturn module.exports = process.fiberLib;\n}\nvar fs = require('fs'), path = require('path');\n\n// Seed random numbers [gh-82]\nMath.random();\n\n// Look for binary for this platform\nvar modPath = path.join(__dirname, 'bin', process.platform+ '-'+ process.arch+ '-'+ process.versions.modules, 'fibers');\ntry {\n\tfs.statSync(modPath+ '.node');\n} catch (ex) {\n\t// No binary!\n\tconsole.error(\n\t\t'## There is an issue with `node-fibers` ##\\n'+\n\t\t'`'+ modPath+ '.node` is missing.\\n\\n'+\n\t\t'Try running this to fix the issue: '+ process.execPath+ ' '+ __dirname.replace(' ', '\\\\ ')+ '/build'\n\t);\n\tthrow new Error('Missing binary. See message above.');\n}\n\n// Pull in fibers implementation\nprocess.fiberLib = module.exports = require(modPath).Fiber;\n","/home/travis/build/npmtest/node-npmtest-fibers/node_modules/fibers/future.js":"\"use strict\";\nvar Fiber = require('./fibers');\nvar util = require('util');\nmodule.exports = Future;\nFunction.prototype.future = function(detach) {\n\tvar fn = this;\n\tvar ret = function() {\n\t\tvar future = new FiberFuture(fn, this, arguments);\n\t\tif (detach) {\n\t\t\tfuture.detach();\n\t\t}\n\t\treturn future;\n\t};\n\tret.toString = function() {\n\t\treturn '<<Future '+ fn+ '.future()>>';\n\t};\n\treturn ret;\n};\n\nfunction Future() {}\n\n/**\n * Run a function(s) in a future context, and return a future to their return value. This is useful\n * for instances where you want a closure to be able to `.wait()`. This also lets you wait for\n * mulitple parallel opertions to run.\n */\nFuture.task = function(fn) {\n\tif (arguments.length === 1) {\n\t\treturn fn.future()();\n\t} else {\n\t\tvar future = new Future, pending = arguments.length, error, values = new Array(arguments.length);\n\t\tfor (var ii = 0; ii < arguments.length; ++ii) {\n\t\t\targuments[ii].future()().resolve(function(ii, err, val) {\n\t\t\t\tif (err) {\n\t\t\t\t\terror = err;\n\t\t\t\t}\n\t\t\t\tvalues[ii] = val;\n\t\t\t\tif (--pending === 0) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tfuture.throw(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfuture.return(values);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.bind(null, ii));\n\t\t}\n\t\treturn future;\n\t}\n};\n\n/**\n * Wrap node-style async functions to instead return futures. This assumes that the last parameter\n * of the function is a callback.\n *\n * If a single function is passed a future-returning function is created. If an object is passed a\n * new object is returned with all functions wrapped.\n *\n * The value that is returned from the invocation of the underlying function is assigned to the\n * property `_` on the future. This is useful for functions like `execFile` which take a callback,\n * but also return meaningful information.\n *\n * `multi` indicates that this callback will return more than 1 argument after `err`. For example,\n * `child_process.exec()`\n *\n * `suffix` will append a string to every method that was overridden, if you pass an object to\n * `Future.wrap()`. Default is 'Future'.\n *\n * var readFileFuture = Future.wrap(require('fs').readFile);\n * var fs = Future.wrap(require('fs'));\n * fs.readFileFuture('example.txt').wait();\n */\nFuture.wrap = function(fnOrObject, multi, suffix, stop) {\n\tif (typeof fnOrObject === 'object') {\n\t\tvar wrapped = Object.create(fnOrObject);\n\t\tfor (var ii in fnOrObject) {\n\t\t\tif (wrapped[ii] instanceof Function) {\n\t\t\t\twrapped[suffix === undefined ? ii+ 'Future' : ii+ suffix] = Future.wrap(wrapped[ii], multi, suffix, stop);\n\t\t\t}\n\t\t}\n\t\treturn wrapped;\n\t} else if (typeof fnOrObject === 'function') {\n\t\tvar fn = function() {\n\t\t\tvar future = new Future;\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\tif (multi) {\n\t\t\t\tvar cb = future.resolver();\n\t\t\t\targs.push(function(err) {\n\t\t\t\t\tcb(err, Array.prototype.slice.call(arguments, 1));\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\targs.push(future.resolver());\n\t\t\t}\n\t\t\tfuture._ = fnOrObject.apply(this, args);\n\t\t\treturn future;\n\t\t}\n\t\t// Modules like `request` return a function that has more functions as properties. Handle this\n\t\t// in some kind of reasonable way.\n\t\tif (!stop) {\n\t\t\tvar proto = Object.create(fnOrObject);\n\t\t\tfor (var ii in fnOrObject) {\n\t\t\t\tif (fnOrObject.hasOwnProperty(ii) && fnOrObject[ii] instanceof Function) {\n\t\t\t\t\tproto[ii] = proto[ii];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfn.__proto__ = Future.wrap(proto, multi, suffix, true);\n\t\t}\n\t\treturn fn;\n\t}\n};\n\n/**\n * Wait on a series of futures and then return. If the futures throw an exception this function\n * /won't/ throw it back. You can get the value of the future by calling get() on it directly. If\n * you want to wait on a single future you're better off calling future.wait() on the instance.\n */\nFuture.wait = function wait(/* ... */) {\n\n\t// Normalize arguments + pull out a FiberFuture for reuse if possible\n\tvar futures = [], singleFiberFuture;\n\tfor (var ii = 0; ii < arguments.length; ++ii) {\n\t\tvar arg = arguments[ii];\n\t\tif (arg instanceof Future) {\n\t\t\t// Ignore already resolved fibers\n\t\t\tif (arg.isResolved()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Look for fiber reuse\n\t\t\tif (!singleFiberFuture && arg instanceof FiberFuture && !arg.started) {\n\t\t\t\tsingleFiberFuture = arg;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfutures.push(arg);\n\t\t} else if (arg instanceof Array) {\n\t\t\tfor (var jj = 0; jj < arg.length; ++jj) {\n\t\t\t\tvar aarg = arg[jj];\n\t\t\t\tif (aarg instanceof Future) {\n\t\t\t\t\t// Ignore already resolved fibers\n\t\t\t\t\tif (aarg.isResolved()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// Look for fiber reuse\n\t\t\t\t\tif (!singleFiberFuture && aarg instanceof FiberFuture && !aarg.started) {\n\t\t\t\t\t\tsingleFiberFuture = aarg;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfutures.push(aarg);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(aarg+ ' is not a future');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(arg+ ' is not a future');\n\t\t}\n\t}\n\n\t// Resumes current fiber\n\tvar fiber = Fiber.current;\n\tif (!fiber) {\n\t\tthrow new Error('Can\\'t wait without a fiber');\n\t}\n\n\t// Resolve all futures\n\tvar pending = futures.length + (singleFiberFuture ? 1 : 0);\n\tfunction cb() {\n\t\tif (!--pending) {\n\t\t\tfiber.run();\n\t\t}\n\t}\n\tfor (var ii = 0; ii < futures.length; ++ii) {\n\t\tfutures[ii].resolve(cb);\n\t}\n\n\t// Reusing a fiber?\n\tif (singleFiberFuture) {\n\t\tsingleFiberFuture.started = true;\n\t\ttry {\n\t\t\tsingleFiberFuture.return(\n\t\t\t\tsingleFiberFuture.fn.apply(singleFiberFuture.context, singleFiberFuture.args));\n\t\t} catch(e) {\n\t\t\tsingleFiberFuture.throw(e);\n\t\t}\n\t\t--pending;\n\t}\n\n\t// Yield this fiber\n\tif (pending) {\n\t\tFiber.yield();\n\t}\n};\n\n/**\n * Return a Future that waits on an ES6 Promise.\n */\nFuture.fromPromise = function(promise) {\n\tvar future = new Future;\n\tpromise.then(function(val) {\n\t\tfuture.return(val);\n\t}, function(err) {\n\t\tfuture.throw(err);\n\t});\n\treturn future;\n};\n\nFuture.prototype = {\n\t/**\n\t * Return the value of this future. If the future hasn't resolved yet this will throw an error.\n\t */\n\tget: function() {\n\t\tif (!this.resolved) {\n\t\t\tthrow new Error('Future must resolve before value is ready');\n\t\t} else if (this.error) {\n\t\t\t// Link the stack traces up\n\t\t\tvar error = this.error;\n\t\t\tvar localStack = {};\n\t\t\tError.captureStackTrace(localStack, Future.prototype.get);\n\t\t\tvar futureStack = Object.getOwnPropertyDescriptor(error, 'futureStack');\n\t\t\tif (!futureStack) {\n\t\t\t\tfutureStack = Object.getOwnPropertyDescriptor(error, 'stack');\n\t\t\t\tif (futureStack) {\n\t\t\t\t\tObject.defineProperty(error, 'futureStack', futureStack);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (futureStack && futureStack.get) {\n\t\t\t\tObject.defineProperty(error, 'stack', {\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tvar stack = futureStack.get.apply(error);\n\t\t\t\t\t\tif (stack) {\n\t\t\t\t\t\t\tstack = stack.split('\\n');\n\t\t\t\t\t\t\treturn [stack[0]]\n\t\t\t\t\t\t\t\t.concat(localStack.stack.split('\\n').slice(1))\n\t\t\t\t\t\t\t\t.concat('    - - - - -')\n\t\t\t\t\t\t\t\t.concat(stack.slice(1))\n\t\t\t\t\t\t\t\t.join('\\n');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn localStack.stack;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset: function(stack) {\n\t\t\t\t\t\tObject.defineProperty(error, 'stack', {\n\t\t\t\t\t\t\tvalue: stack,\n\t\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\t\tenumerable: false,\n\t\t\t\t\t\t\twritable: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: false,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthrow error;\n\t\t} else {\n\t\t\treturn this.value;\n\t\t}\n\t},\n\n\t/**\n\t * Mark this future as returned. All pending callbacks will be invoked immediately.\n\t */\n\t\"return\": function(value) {\n\t\tif (this.resolved) {\n\t\t\tthrow new Error('Future resolved more than once');\n\t\t}\n\t\tthis.value = value;\n\t\tthis.resolved = true;\n\n\t\tvar callbacks = this.callbacks;\n\t\tif (callbacks) {\n\t\t\tdelete this.callbacks;\n\t\t\tfor (var ii = 0; ii < callbacks.length; ++ii) {\n\t\t\t\ttry {\n\t\t\t\t\tvar ref = callbacks[ii];\n\t\t\t\t\tif (ref[1]) {\n\t\t\t\t\t\tref[1](value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tref[0](undefined, value);\n\t\t\t\t\t}\n\t\t\t\t} catch(ex) {\n\t\t\t\t\t// console.log('Resolve cb threw', String(ex.stack || ex.message || ex));\n\t\t\t\t\tprocess.nextTick(function() {\n\t\t\t\t\t\tthrow(ex);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Throw from this future as returned. All pending callbacks will be invoked immediately.\n\t */\n\t\"throw\": function(error) {\n\t\tif (this.resolved) {\n\t\t\tthrow new Error('Future resolved more than once');\n\t\t} else if (!error) {\n\t\t\tthrow new Error('Must throw non-empty error');\n\t\t}\n\t\tthis.error = error;\n\t\tthis.resolved = true;\n\n\t\tvar callbacks = this.callbacks;\n\t\tif (callbacks) {\n\t\t\tdelete this.callbacks;\n\t\t\tfor (var ii = 0; ii < callbacks.length; ++ii) {\n\t\t\t\ttry {\n\t\t\t\t\tvar ref = callbacks[ii];\n\t\t\t\t\tif (ref[1]) {\n\t\t\t\t\t\tref[0].throw(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tref[0](error);\n\t\t\t\t\t}\n\t\t\t\t} catch(ex) {\n\t\t\t\t\t// console.log('Resolve cb threw', String(ex.stack || ex.message || ex));\n\t\t\t\t\tprocess.nextTick(function() {\n\t\t\t\t\t\tthrow(ex);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * \"detach\" this future. Basically this is useful if you want to run a task in a future, you\n\t * aren't interested in its return value, but if it throws you don't want the exception to be\n\t * lost. If this fiber throws, an exception will be thrown to the event loop and node will\n\t * probably fall down.\n\t */\n\tdetach: function() {\n\t\tthis.resolve(function(err) {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Returns whether or not this future has resolved yet.\n\t */\n\tisResolved: function() {\n\t\treturn this.resolved === true;\n\t},\n\n\t/**\n\t * Returns a node-style function which will mark this future as resolved when called.\n\t */\n\tresolver: function() {\n\t\treturn function(err, val) {\n\t\t\tif (err) {\n\t\t\t\tthis.throw(err);\n\t\t\t} else {\n\t\t\t\tthis.return(val);\n\t\t\t}\n\t\t}.bind(this);\n\t},\n\n\t/**\n\t * Waits for this future to resolve and then invokes a callback.\n\t *\n\t * If two arguments are passed, the first argument is a future which will be thrown to in the case\n\t * of error, and the second is a function(val){} callback.\n\t *\n\t * If only one argument is passed it is a standard function(err, val){} callback.\n\t */\n\tresolve: function(arg1, arg2) {\n\t\tif (this.resolved) {\n\t\t\tif (arg2) {\n\t\t\t\tif (this.error) {\n\t\t\t\t\targ1.throw(this.error);\n\t\t\t\t} else {\n\t\t\t\t\targ2(this.value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\targ1(this.error, this.value);\n\t\t\t}\n\t\t} else {\n\t\t\t(this.callbacks = this.callbacks || []).push([arg1, arg2]);\n\t\t}\n\t\treturn this;\n\t},\n\n\t/**\n\t * Resolve only in the case of success\n\t */\n\tresolveSuccess: function(cb) {\n\t\tthis.resolve(function(err, val) {\n\t\t\tif (err) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcb(val);\n\t\t});\n\t\treturn this;\n\t},\n\n\t/**\n\t * Propogate results to another future.\n\t */\n\tproxy: function(future) {\n\t\tthis.resolve(function(err, val) {\n\t\t\tif (err) {\n\t\t\t\tfuture.throw(err);\n\t\t\t} else {\n\t\t\t\tfuture.return(val);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Propogate only errors to an another future or array of futures.\n\t */\n\tproxyErrors: function(futures) {\n\t\tthis.resolve(function(err) {\n\t\t\tif (!err) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (futures instanceof Array) {\n\t\t\t\tfor (var ii = 0; ii < futures.length; ++ii) {\n\t\t\t\t\tfutures[ii].throw(err);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfutures.throw(err);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t},\n\n\t/**\n\t * Returns an ES6 Promise\n\t */\n\tpromise: function() {\n\t\tvar that = this;\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tthat.resolve(function(err, val) {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(val);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n\t * Differs from its functional counterpart in that it actually resolves the future. Thus if the\n\t * future threw, future.wait() will throw.\n\t */\n\twait: function() {\n\t\tif (this.isResolved()) {\n\t\t\treturn this.get();\n\t\t}\n\t\tFuture.wait(this);\n\t\treturn this.get();\n\t},\n};\n\n/**\n * A function call which loads inside a fiber automatically and returns a future.\n */\nfunction FiberFuture(fn, context, args) {\n\tthis.fn = fn;\n\tthis.context = context;\n\tthis.args = args;\n\tthis.started = false;\n\tvar that = this;\n\tprocess.nextTick(function() {\n\t\tif (!that.started) {\n\t\t\tthat.started = true;\n\t\t\tFiber(function() {\n\t\t\t\ttry {\n\t\t\t\t\tthat.return(fn.apply(context, args));\n\t\t\t\t} catch(e) {\n\t\t\t\t\tthat.throw(e);\n\t\t\t\t}\n\t\t\t}).run();\n\t\t}\n\t});\n}\nutil.inherits(FiberFuture, Future);\n"}